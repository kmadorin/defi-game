import Anthropic from '@anthropic-ai/sdk';
import chalk from 'chalk'
import { createClients, getBalance, sendTransaction, generatePrivateKey } from './blockchain.js'
import * as fs from 'fs/promises'
import dotenv from 'dotenv'

dotenv.config()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
function printChat(message, role) {
	if (role === 'user') {
		console.log(chalk.cyan(`üí¨ –í—ã: ${message}`));
	} else if (role === 'assistant') {
		console.log(chalk.cyan(`ü§ñ –ú–µ–Ω–µ–¥–∂–µ—Ä: ${message}`));
	}
}

// –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–≥–µ–Ω—Ç–∞
const tools = {
	getBalance: async ({ address }) => {
		try {
			const { publicClient } = createClients(process.env.PRIVATE_KEY)
			const balance = await getBalance(address, publicClient)
			return { balance: balance.toString() }
		} catch (error) {
			throw error
		}
	},

	sendTransaction: async ({ to, value }) => {
		try {
			const { walletClient } = createClients(process.env.PRIVATE_KEY)
			const hash = await sendTransaction(walletClient, to, value)
			return { hash }
		} catch (error) {
			throw error
		}
	},

	createWallet: async () => {
		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ .env
			let privateKey = process.env.PRIVATE_KEY;
			let envContent = '';
			let isNewWallet = false;
			
			try {
				envContent = await fs.readFile('.env', 'utf-8');
			} catch (error) {
				if (error.code === 'ENOENT') {
					envContent = 'ANTHROPIC_API_KEY=' + process.env.ANTHROPIC_API_KEY + '\n';
				} else {
					return {
						error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª .env: ' + error.message
					};
				}
			}

			// –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
			if (!privateKey || !privateKey.startsWith('0x')) {
				privateKey = generatePrivateKey();
				isNewWallet = true;
				
				// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å PRIVATE_KEY –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
				const envLines = envContent.split('\n').filter(line => !line.startsWith('PRIVATE_KEY='));
				
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
				envLines.push(`PRIVATE_KEY=${privateKey}`);
				const newContent = envLines.join('\n');
				
				try {
					// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
					await fs.writeFile('.env', newContent);
					// –û–±–Ω–æ–≤–ª—è–µ–º process.env
					process.env.PRIVATE_KEY = privateKey;
				} catch (error) {
					return {
						error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ' + error.message
					};
				}
			}

			// –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
			const { account } = createClients(privateKey);
			
			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
			return {
				address: account.address,
				status: isNewWallet ? 'created' : 'existing',
				message: isNewWallet 
					? '–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫' 
					: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª–µ–∫'
			};
			
		} catch (error) {
			return {
				error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫: ' + error.message
			};
		}
	}
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞
export class PortfolioManager {
	constructor(apiKey) {
		this.claude = new Anthropic({ apiKey })
		this.tools = tools
		this.memory = []
	}

	async processMessage(message) {
		try {
			this.memory.push(`User: ${message}`)
			
			const toolsList = [{
				name: "getBalance",
				description: "–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π)",
				input_schema: {
					type: "object",
					properties: {
						address: {
							type: "string",
							description: "–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
						}
					},
					required: []
				}
			}, {
				name: "prepareSendTransaction",
				description: "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ETH. –ü—Ä–∏–º–µ—Ä: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å 0.1 ETH –Ω–∞ –∞–¥—Ä–µ—Å 0x...'",
				input_schema: {
					type: "object",
					properties: {
						to: {
							type: "string",
							description: "–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è"
						},
						valueInEth: {
							type: "string",
							description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 0.00)"
						}
					},
					required: ["to", "valueInEth"]
				}
			}, {
				name: "createWallet",
				description: "Creates a new wallet or returns existing one",
				input_schema: {
					type: "object",
					properties: {},
					required: []
				}
			}];

			const response = await this.claude.messages.create({
				model: "claude-3-sonnet-20240229",
				max_tokens: 1024,
				system: `You are a DeFi Portfolio Manager. Help users manage their crypto wallet. Communicate in Russian.
When createWallet returns status "existing", just inform user that they already have a wallet and show its address.
When user asks about wallet balance, use getBalance tool. If no address is specified, it will show balance for user's wallet.
Be concise and direct in your responses. Never show or mention private keys in your response.`,
				messages: [{ role: 'user', content: message }],
				tools: toolsList
			});

			// console.log('Got response from Claude');
			//console.log('Full response:', JSON.stringify(response, null, 2));

			const toolUseBlocks = response.content.filter(block => block.type === 'tool_use');
			
			if (toolUseBlocks.length > 0) {
				const results = await this.executeTools(toolUseBlocks);
				console.log('Tool results:', results);
				
				const followUpResponse = await this.claude.messages.create({
					model: "claude-3-sonnet-20240229",
					max_tokens: 1024,
					system: `You are a DeFi Portfolio Manager. Help users manage their crypto wallet. Communicate in Russian.
When createWallet returns status "existing", just inform user that they already have a wallet and show its address.
When user asks about wallet balance, use getBalance tool. If no address is specified, it will show balance for user's wallet.
Be concise and direct in your responses. Never show or mention private keys in your response.`,
					messages: [
						{ role: 'user', content: message },
						{ 
							role: 'assistant',
							content: [{
								type: 'tool_use',
								id: toolUseBlocks[0].id,
								name: toolUseBlocks[0].name,
								input: toolUseBlocks[0].input
							}]
						},
						{ 
							role: 'user',
							content: [{
								type: 'tool_result',
								tool_use_id: toolUseBlocks[0].id,
								content: JSON.stringify(results[0].result)
							}]
						}
					],
					tools: toolsList
				});

				const textBlocks = followUpResponse.content.filter(block => block.type === 'text');
				if (textBlocks.length > 0) {
					const responseText = textBlocks[0].text;
					printChat(responseText, 'assistant');
					return responseText;
				}
			} else {
				const textBlocks = response.content.filter(block => block.type === 'text');
				if (textBlocks.length > 0) {
					const responseText = textBlocks[0].text;
					printChat(responseText, 'assistant');
					return responseText;
				}
			}

			throw new Error('No valid response content found');

		} catch (error) {
			console.error('Error in processMessage:', error);
			const errorMessage = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`;
			printChat(errorMessage, 'assistant');
			return errorMessage;
		}
	}

	buildContext() {
		return this.memory.slice(-5).join('\n')
	}

	async executeTools(toolCalls) {
		const results = []

		for (const call of toolCalls) {
			try {
				const tool = this.tools[call.name]
				if (!tool) {
					throw new Error(`Unknown tool: ${call.name}`)
				}

				const result = await tool(call.input)
				results.push({
					tool: call.name,
					parameters: call.input,
					result
				})
			} catch (error) {
				results.push({
					tool: call.name,
					parameters: call.input,
					error: error.message
				})
			}
		}

		return results
	}
} 